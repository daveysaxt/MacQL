//
//  funcdefs.h
//  MacQL
//
//  Created by David Thurstan on 15/03/2015.
//
//

#ifndef MacQL_funcdefs_h
#define MacQL_funcdefs_h

void InitROM(void);
void SerIO(void);
void SerOpen(void);
void SerClose(void);
void SchedulerCmd(void);
void DrvIO(void);
void DrvOpen(void);
void DrvClose(void);
void KbdCmd(void);
void PollCmd(void);
void KBencCmd(void);
void BASEXTCmd(void);
void devpefio_cmd(void);
void devpefo_cmd(void);
void QL_KeyTrans(void);
void UseIPC(void);
void ReadIPC(void);
void WriteIPC(void);
void ReadMdvSector(void);
void WriteMdvSector(void);
void VerifyMdvSector(void);
void ReadMdvHeader(void);
void DoOpt1(void);
void DoOpt2(void);
void FastStartup(void);
void MdvIO(void);
void MdvOpen(void);
void MdvClose(void);
void MdvSlaving(void);
void MdvFormat(void);
void ori_b(void);
void ori_w(void);
void ori_l(void);
void ori_to_ccr(void);
void ori_to_sr(void);
void btst_d(void);
void bset_d(void);
void bclr_d(void);
void bchg_d(void);
void movep_w_rm(void);
void movep_l_rm(void);
void movep_w_mr(void);
void movep_l_mr(void);
void andi_b(void);
void andi_w(void);
void andi_l(void);
void andi_to_ccr(void);
void andi_to_sr(void);
void subi_b(void);
void subi_w(void);
void subi_l(void);
void addi_b(void);
void addi_w(void);
void addi_l(void);
void btst_s(void);
void bset_s(void);
void bclr_s(void);
void bchg_s(void);
void eori_b(void);
void eori_w(void);
void eori_l(void);
void eori_to_ccr(void);
void eori_to_sr(void);
void cmpi_b(void);
void cmpi_w(void);
void cmpi_l(void);
void move_b(void);
void move_b_to_dn(void);
void move_b_from_dn(void);
void move_l(void);
void move_l_to_dn(void);
void move_l_from_dn(void);
void movea_l(void);
void movea_l_an(void);
void move_w(void);
void move_w_to_dn(void);
void move_w_from_dn(void);
void movea_w(void);
void move_b_reg(void);
void move_w_reg(void);
void move_l_reg(void);
void negx_b(void);
void negx_w(void);
void negx_l(void);
void move_from_sr(void);
void chk(void);
void lea(void);
void clr_b(void);
void clr_w(void);
void clr_l(void);
void neg_b(void);
void neg_w(void);
void neg_l(void);
void move_to_ccr(void);
void not_b(void);
void not_w(void);
void not_l(void);
void move_to_sr(void);
void nbcd(void);
void pea(void);
void swap(void);
void ext_w(void);
void movem_save_w(void);
void movem_save_l(void);
void ext_l(void);
void tst_b(void);
void tst_w(void);
void tst_l(void);
void tas(void);
void illegal(void);
void movem_load_w(void);
void movem_load_l(void);
void trap(void);
void trap0(void);
void trap1(void);
void trap2(void);
void trap3(void);
void trap4(void);
void link(void);
void unlk(void);
void move_to_usp(void);
void move_from_usp(void);
void reset(void);
void nop(void);
void stop(void);
void rte(void);
void rts(void);
void trapv(void);
void rtr(void);
void jsr(void);
void jsr_displ(void);
void jmp(void);
void addq_b(void);
void addq_w(void);
void addq_l(void);
void addq_an(void);
void addq_4_an(void);
void scc(void);
void st(void);
void sf(void);
void dbcc(void);
void dbf(void);
void subq_b(void);
void subq_w(void);
void subq_l(void);
void subq_an(void);
void subq_4_an(void);
void bcc_s(void);
void bcc_bad(void);
void bne_s(void);
void beq_s(void);
void bpl_s(void);
void bmi_s(void);
void bge_s(void);
void blt_s(void);
void bgt_s(void);
void ble_s(void);
void bcs_s(void);
void bccc_s(void);
void bcc_l(void);
void beq_l(void);
void bne_l(void);
void bra_s(void);
void bra_l(void);
void bsr(void);
void moveq(void);
void or_b_dn(void);
void or_w_dn(void);
void or_l_dn(void);
void or_b_ea(void);
void or_w_ea(void);
void or_l_ea(void);
void divu(void);
void sbcd(void);
void divs(void);
void sub_b_dn(void);
void sub_w_dn(void);
void sub_l_dn(void);
void sub_b_ea(void);
void sub_w_ea(void);
void sub_l_ea(void);
void sub_w_an(void);
void sub_l_an(void);
void subx_b_r(void);
void subx_w_r(void);
void subx_l_r(void);
void subx_b_m(void);
void subx_w_m(void);
void subx_l_m(void);
void cmp_b(void);
void cmp_b_dan(void);
void cmp_w(void);
void cmp_l(void);
void cmp_b_dn(void);
void cmp_w_dn(void);
void cmp_l_dn(void);
void cmpa_w(void);
void cmpa_l(void);
void cmpa_l_an(void);
void eor_b(void);
void eor_w(void);
void eor_l(void);
void cmpm_b(void);
void cmpm_w(void);
void cmpm_l(void);
void and_b_dn(void);
void and_w_dn(void);
void and_l_dn(void);
void and_l_dn_dn(void);
void and_b_ea(void);
void and_w_ea(void);
void and_l_ea(void);
void mulu(void);
void abcd(void);
void exg_d(void);
void exg_a(void);
void exg_ad(void);
void muls(void);
void add_b_dn(void);
void add_w_dn(void);
void add_l_dn(void);
void add_b_dn_dn(void);
void add_w_dn_dn(void);
void add_l_dn_dn(void);
void add_b_ea(void);
void add_w_ea(void);
void add_l_ea(void);
void add_w_an(void);
void add_l_an(void);
void add_w_an_dn(void);
void add_l_an_dn(void);
void addx_b_r(void);
void addx_w_r(void);
void addx_l_r(void);
void addx_b_m(void);
void addx_w_m(void);
void addx_l_m(void);
void lsr_b_i(void);
void lsl_b_i(void);
void lsr1_b(void);
void lsl1_b(void);
void lsr_w_i(void);
void lsl_w_i(void);
void lsr1_w(void);
void lsl1_w(void);
void lsr_l_i(void);
void lsl_l_i(void);
void lsr1_l(void);
void lsl1_l(void);
void lsl2_l(void);
void lsr_b_r(void);
void lsl_b_r(void);
void lsr_w_r(void);
void lsl_w_r(void);
void lsr_l_r(void);
void lsl_l_r(void);
void asr_b_i(void);
void asl_b_i(void);
void asr_w_i(void);
void asl_w_i(void);
void asr_l_i(void);
void asl_l_i(void);
void asr_b_r(void);
void asl_b_r(void);
void asr_w_r(void);
void asl_w_r(void);
void asr_l_r(void);
void asl_l_r(void);
void roxr_b_i(void);
void roxl_b_i(void);
void roxr_w_i(void);
void roxl_w_i(void);
void roxr_l_i(void);
void roxl_l_i(void);
void roxr_b_r(void);
void roxl_b_r(void);
void roxr_w_r(void);
void roxl_w_r(void);
void roxr_l_r(void);
void roxl_l_r(void);
void ror_b_i(void);
void rol_b_i(void);
void ror_w_i(void);
void rol_w_i(void);
void ror_l_i(void);
void rol_l_i(void);
void ror_b_r(void);
void rol_b_r(void);
void ror_w_r(void);
void rol_w_r(void);
void ror_l_r(void);
void rol_l_r(void);
void asr_m(void);
void asl_m(void);
void lsr_m(void);
void lsl_m(void);
void roxr_m(void);
void roxl_m(void);
void ror_m(void);
void rol_m(void);
void code1010(void);
void code1111(void);
void InvalidCode(void);
char *OpCodePtr(char *);


#endif
